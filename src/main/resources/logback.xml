<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->


<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="/export/Logs" />
	<!-- <property name="log_dir" value="D:/JD_WORK/LOG" /> -->
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />


	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				<!--日期 日志级别 类名 方法名 线程名 第几行 内容 -->
				[%date] [%6p] [%logger] [%M] [%t] [%line] [%m]%n
			</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>info</level>
		</filter>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log_dir}/error.log</file>
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<filter class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
			<evaluator>
				<expression>return !message.contains("jmq") || !message.contains("mq");</expression>
			</evaluator>
			<OnMatch>ACCEPT</OnMatch>        
			<OnMismatch>DENY</OnMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 配置日志生成的目录和文件名,压缩格式.gz或.zip -->
			<fileNamePattern>${log_dir}/error/%d{yyyy-MM-dd}.%i.error.gz</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 文件大小 -->
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!-- 保存30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。 
			<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"> 
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern> <minIndex>1</minIndex> 
			<maxIndex>3</maxIndex> </rollingPolicy> -->
		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 <triggeringPolicy 
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> <maxFileSize>5MB</maxFileSize> 
			</triggeringPolicy> -->

		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>


	<!-- INFO级别日志 appender -->
	<appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log_dir}/main.log</file>
		<!-- 过滤器，只记录INFO级别的日志 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator> <!-- 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator -->
				<expression><![CDATA[return !message.contains("mq") && !event.getLoggerName().contains("jmq");]]></expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 配置日志生成的目录和文件名,压缩格式.gz或.zip -->
			<fileNamePattern>${log_dir}/info/%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 文件大小 -->
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!-- 保存30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
	</appender>

	<!-- DEBUG级别日志 appender -->
	<appender name="DEBUG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log_dir}/debug.log</file>
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 配置日志生成的目录和文件名,压缩格式.gz或.zip -->
			<fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}.%i.debug.gz</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 文件大小 -->
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!-- 保存30天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
		</encoder>
	</appender>

	<logger name="com.tao.dao" level="debug" />

	<!-- root级别 DEBUG -->
	<root level="info">
		<!-- 控制台输出 -->
		<appender-ref ref="console" />
		<!-- 文件输出 -->
		<appender-ref ref="ERROR" />
		<appender-ref ref="INFO" />
	</root>
</configuration>